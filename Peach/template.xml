<Peach xmlns="http://phed.org/2008/Peach" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://phed.org/2008/Peach ../peach.xsd" version="1.0"
	author="Michael Eddington" description="Hello World Example">

	<!--

	This is a very simple Hello World example.
	
	Syntax:
	
	  python peach.py samples\HelloWorld.xml
	  
	Output:
	
	  This example will display all each test case to the console, you should see lots of test data
	  scroll along.  This example should only take a couple minutes to complete.
	
	Authors:
	  Michael Eddington (mike@phed.org)
	
	$Id: HelloWorld.xml 2174 2010-10-28 00:12:48Z meddingt $
	
	-->

	<!-- Import defaults for Peach instance -->
	<Include ns="default" src="file:defaults.xml" />
    <PythonPath path="./" />
	<Import import="fuzzIntentData" />

	<!-- Create a simple data template containing a single string -->
	<DataModel name="StringTemplate">
		<String value="Hello World!" />
	</DataModel>
	<DataModel name="IntegerTemplate">
        <Number name="value" maxSize="32" minSize="32" size="32" signed="true" value="875770419" />
	</DataModel>

	<!-- 
		Our state model will perform actions using our data models.  Actions are things
		like sending or receiving data.  How the data is sent or received will depend on
		the publisher we specify later on.  For example you might configure to use
		a FileWriter publisher that would write a file.   For this example we will be 
		displaying the output to the console via standard out (Stdout).
	-->
	<StateModel name="State" initialState="State1" >
		<State name="State1"  >
			<Action type="call" method="test" publisher="myPublisher">
                <Param name="p1" type="in">
				    <DataModel ref="IntegerTemplate"/>
                    <Data name="data" fileName="./test.txt"/>
                </Param>
			</Action>
		</State>
	</StateModel>

    <Agent name="LocalAgent" location="http://127.0.0.1:9000">
       <Monitor class="fuzzIntentDataMonitor.FuzzIntentDataMonitor">
    
       </Monitor>
    
    </Agent>

	<!-- Our Test element will link together our state model and publisher -->
	<Test name="HelloWorldTest">
		<StateModel ref="State"/>
        <Agent ref="LocalAgent"/>
		<!--
			The publisher we select will determin what the actions
			in our state model actually do.  For this example we are
			using the "Stdout" publisher.  This publisher will send any
			"output" actions to the console.
		-->
<!--        <Publisher name="myPublisher" class="fuzzIntentData.FuzzIntentData" />-->
        <Publisher name="myPublisher" class="fuzzIntentData.FuzzIntentData" >
            <Param name="filename" value="test" />
        </Publisher>
	</Test>

	<!--
		Configure a single run.  The name "DefaultRun" is special.  When running
		this example, if we do not specify a run name on the command line, this run will
		be chosen automatically.
	-->
	<Run name="DefaultRun" description="Stdout HelloWorld Run">
		
		<!-- For this example, no logging has been configured. -->
		<!-- <Logger class="logger.Filesystem"><Param name="path" value="logs"/></Logger> -->

		<Test ref="HelloWorldTest" />
        <Logger class="logger.Filesystem">
                <Param name="path" value="logs" />
        </Logger>
	</Run>

</Peach>
<!-- end -->
